import requests
import json
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º HTTPS
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ ---
proxy_host = "209.127.25.129"
proxy_port = "8000"
proxy_user = "ssb3FS"
proxy_pass = "H1Xnh9"

proxies = {
    'http': f'http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}',
    'https': f'http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}',
}

headers = {
    'Host': 'api.cryptorank.io',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) Gecko/20100101 Firefox/140.0',
    'Accept': '*/*',
    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
    'Referer': 'https://cryptorank.io/',
    'Content-Type': 'application/json',
    'Origin': 'https://cryptorank.io/',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-site',
    'Priority': 'u=4',
}

url = 'https://api.cryptorank.io/v0/coins/historical-prices?keys=bitcoin,ethereum,ripple,tether,bnb,solana,usdcoin,dogecoin,lido-staked-ether,tron,cardano'

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy ---
# –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
# –§–æ—Ä–º–∞—Ç: dialect+driver://username:password@host:port/database
DATABASE_URL = "postgresql://postgres:@77.221.140.63:5432/test1"

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_engine(DATABASE_URL, echo=False) # echo=True –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã ---
class CryptoPrice(Base):
    __tablename__ = "crypto_prices"

    id = Column(Integer, primary_key=True, index=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ id
    token_name = Column(String, index=True)
    currency = Column(String, index=True)
    period = Column(String, index=True)
    price = Column(Float)
    volatility = Column(Float, nullable=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ volatility
    updated_at = Column(DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f"<CryptoPrice(token_name='{self.token_name}', currency='{self.currency}', period='{self.period}', price={self.price})>"

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç) ---
# –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –º–æ–¥–µ–ª–∏ –≤—ã—à–µ.
# –í production —Å—Ä–µ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Alembic).
Base.metadata.create_all(bind=engine)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
def main():
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    db = SessionLocal()
    try:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy")

        # --- –ó–∞–ø—Ä–æ—Å –∫ API ---
        response = requests.get(url, headers=headers, verify=False, timeout=30, proxies=proxies)

        if response.status_code == 200:
            data = response.json()

            if 'data' in data:
                objects_to_insert = []

                for token_name, token_data in data['data'].items():
                    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    volatility_data = token_data.get('volatility', {})
                    volatility_usd = volatility_data.get('USD')
                    volatility_btc = volatility_data.get('BTC')
                    volatility_eth = volatility_data.get('ETH')

                    for period, prices in token_data.get('histPrices', {}).items():
                        usd_price = prices.get('USD')
                        btc_price = prices.get('BTC')
                        eth_price = prices.get('ETH')

                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                        if usd_price is not None:
                            objects_to_insert.append(CryptoPrice(
                                token_name=token_name,
                                currency='USD',
                                period=period,
                                price=usd_price,
                                volatility=volatility_usd
                            ))
                        if btc_price is not None:
                            objects_to_insert.append(CryptoPrice(
                                token_name=token_name,
                                currency='BTC',
                                period=period,
                                price=btc_price,
                                volatility=volatility_btc
                            ))
                        if eth_price is not None:
                            objects_to_insert.append(CryptoPrice(
                                token_name=token_name,
                                currency='ETH',
                                period=period,
                                price=eth_price,
                                volatility=volatility_eth
                            ))

                #_bulk_save_objects –∏–ª–∏ bulk_insert_mappings –º–æ–≥—É—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ,
                # –Ω–æ add_all –ø—Ä–æ—â–µ –¥–ª—è –Ω–∞—á–∞–ª–∞
                if objects_to_insert:
                    db.add_all(objects_to_insert)
                    db.commit()
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {len(objects_to_insert)} —Å—Ç—Ä–æ–∫ –≤ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy.")
                else:
                    print("üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.")
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ 2
            else:
                print("‚ùå –ö–ª—é—á 'data' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")
                print("–û—Ç–≤–µ—Ç:", response.text[:500])

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            print("–û—Ç–≤–µ—Ç:", response.text[:500])

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è SQLAlchemy
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        db.rollback()
    finally:
        db.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é

if __name__ == "__main__":
    main()